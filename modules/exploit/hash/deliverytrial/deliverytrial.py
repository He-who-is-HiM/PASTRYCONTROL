from recon.core.module import BaseModule
from cookielib import CookieJar
import hashlib
import re

class Module(BaseModule):

    cookiejar = CookieJar()

    meta = {
    'name':'DELIVERYTRIAL',
    'author':'gwaffles (https://twitter.com/gwaffles_)',
    'description':'An online password hash recovery technique tailored towards a single MD5 instance.',
    'options':(
            ('hash', None, True, 'The hash to recover.'),
        ),
    'comments':(
            'This module only supports md5 hashes at the moment.',
            'sha1, sha224, sha256, sha384, and sha512 will be added at a later date.',
        ),
    }

    def module_run(self):
        _hash = self.options['hash']
        isvalid = self.check_md5_hash_validity(_hash)
        result = self.recover_md5_hash(_hash)

        if isvalid is True:
            if result != None:
                self.output('%s => %s' % (_hash, result))
            elif result is None:
                self.error('md5 recovery failed.')

        elif isvalid is False:
            self.error('\'%s\' is not a md5 hash.' % _hash)

    def recover_md5_hash(self, md5hash):

        query = 'http://www.google.com/search?q=%s' % md5hash
        resp = self.request(url=query, cookiejar=self.cookiejar)

        if resp.status_code == 503:
            resp = self._solve_google_captcha(resp)

        elif resp.status_code == 200:
            wordlist = resp.text.replace('.',
            ' ').replace(':',
            ' ').replace('?',
            '').replace("('",
            ' ').replace("'",
            ' ').split(' ')

            for word in wordlist:
                word = str(word.encode('utf-8'))
                word = word.strip()

                m = hashlib.md5()
                m.update(word)

                if m.hexdigest() == md5hash:
                    return bytes.decode(word)
            return None

    def check_md5_hash_validity(self, md5hash):
        md5valid = re.findall(r'([a-fA-F0-9]{32})', md5hash)

        if md5valid:
            return True
        elif not md5valid:
            return False
