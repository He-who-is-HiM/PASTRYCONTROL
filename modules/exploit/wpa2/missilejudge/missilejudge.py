from recon.core.module import BaseModule
from itertools import product
import string
import os

class Module(BaseModule):

    meta = {
    'name':'MISSILEJUDGE',

    'description':'A cable modem default password generator.',
    'author':'gwaffles (https://twitter.com/gwaffles_)',
    'options':(
            ('ssid', None, True, 'The ssid to create a wordlist for.'),
            ('hex', True, False, 'If you only need hex-based passwords.'),
            ('nhex', None, False, 'If you only need non-hex-based passwords.')
        )
    }

    non_hex = string.uppercase + string.digits
    hex_based = "0123456789ABCDEF"

    def module_run(self):
        ssid = self.options['ssid'].upper()

        wrdlist_path = os.path.expanduser('~/')

        _suffix = ssid.lower() + '.modem.wordlist'
        _path = os.path.join(wrdlist_path, _suffix)

        if self.options['nhex'] is None and self.options['hex'] is None:
            self.error('You must choose a character set.')
            return

        if 'U10C022' in ssid:
            self.output("Generating keys for the %s modem ..." % ssid)
            U10C022_KEYS = self.U10C022(ssid)
            lok = len(U10C022_KEYS)
            self.output("Generating %d keys for the %s modem ..." % (lok, ssid))
            self.write_wordlist(_path, U10C022_KEYS)
            self.output("done.")

        elif 'SBG6580' in ssid:
            self.output("Generating keys for the %s modem ..." % ssid)
            SBG6580_KEYS = self.SBG6580(ssid)
            lok = len(SBG6580_KEYS)
            self.output("Generating %d keys for the %s modem ..." % (lok, ssid))
            self.write_wordlist(_path, SBG6580_KEYS)
            self.output("done.")

        elif 'DDW3611' in ssid:
            self.output("Generating keys for the %s modem ..." % ssid)
            DDW3611_KEYS = self.DDW3611(ssid)
            lok = len(DDW3611_KEYS)
            self.output("Generating %d keys for the %s modem ..." % (lok, ssid))
            self.write_wordlist(_path, DDW3611_KEYS)
            self.output("done.")

        elif 'DDW3612' in ssid:
            self.output("Generating keys for the %s modem ..." % ssid)
            DDW3612_KEYS = self.DDW3612(ssid)
            lok = len(DDW3612_KEYS)
            self.output("Generating %d keys for the %s modem ..." % (lok, ssid))
            self.write_wordlist(_path, DDW3612_KEYS)
            self.output("done.")

        elif 'TC8717T' in ssid:
            self.output("Generating keys for the %s modem ..." % ssid)
            TC8717T_KEYS = self.TC8717T(ssid)
            lok = len(TC8717T_KEYS)
            self.output("Generating %d keys for the %s modem ..." % (lok, ssid))
            self.write_wordlist(_path, TC8717T_KEYS)
            self.output("done.")

        elif 'DDW365' in ssid:
            self.output("Generating keys for the %s modem ..." % ssid)
            DDW365_KEYS = self.DDW365(ssid)
            lok = len(DDW365_KEYS)
            self.output("Generating %d keys for the %s modem ..." % (lok, ssid))
            self.write_wordlist(_path, DDW365_KEYS)
            self.output("done.")

        elif 'TG852G' in ssid:
            self.output("Generating keys for the %s modem ..." % ssid)
            TG852G_KEYS = self.TG852G(ssid)
            lok = len(TG852G_KEYS)
            self.output("Generating %d keys for the %s modem ..." % (lok, ssid))
            self.write_wordlist(_path, TG852G_KEYS)
            self.output("done.")

        elif 'DWG875' in ssid:
            self.output("Generating keys for the %s modem ..." % ssid)
            DWG875_KEYS = self.DWG875(ssid)
            lok = len(DWG875_KEYS)
            self.output("Generating %d keys for the %s modem ..." % (lok, ssid))
            self.write_wordlist(_path, DWG875_KEYS)
            self.output("done.")

        elif 'DWG855' in ssid:
            self.output("Generating keys for the %s modem ..." % ssid)
            DWG855_KEYS = self.DWG855(ssid)
            lok = len(DWG855_KEYS)
            self.output("Generating %d keys for the %s modem ..." % (lok, ssid))
            self.write_wordlist(_path, DWG855_KEYS)
            self.output("done.")

        elif 'DG860A' in ssid:
            self.output("Generating keys for the %s modem ..." % ssid)
            DG860A_KEYS = self.DG860A(ssid)
            lok = len(DG860A_KEYS)
            self.output("Generating %d keys for the %s modem ..." % (lok, ssid))
            self.write_wordlist(_path, DG860A_KEYS)
            self.output("done.")

        elif 'TG862G' in ssid:
            self.output("Generating keys for the %s modem ..." % ssid)
            TG862G_KEYS = self.TG862G(ssid)
            lok = len(TG862G_KEYS)
            self.output("Generating %d keys for the %s modem ..." % (lok, ssid))
            self.write_wordlist(_path, TG862G_KEYS)
            self.output("done.")

        elif 'TG1672G' in ssid:
            self.output("Generating keys for the %s modem ..." % ssid)
            TG1672G_KEYS = self.TG1672G(ssid)
            lok = len(TG1672G_KEYS)
            self.output("Generating %d keys for the %s modem ..." % (lok, ssid))
            self.write_wordlist(_path, TG1672G_KEYS)
            self.output("done.")

        elif 'DVW3201B' in ssid:
            self.output("Generating keys for the %s modem ..." % ssid)
            DVW3201B_KEYS = self.DVW3201B(ssid)
            lok = len(DVW3201B_KEYS)
            self.output("Generating %d keys for the %s modem ..." % (lok, ssid))
            self.write_wordlist(_path, DVW3201B_KEYS)
            self.output("done.")

        elif 'TWG850' in ssid:
            self.output("Generating keys for the %s modem ..." % ssid)
            TWG850_KEYS = self.TWG850(ssid)
            lok = len(TWG850_KEYS)
            self.output("Generating %d keys for the %s modem ..." % (lok, ssid))
            self.write_wordlist(_path, TWG850_KEYS)
            self.output("done.")

        elif 'DWG850' in ssid:
            self.output("Generating keys for the %s modem ..." % ssid)
            DWG850_KEYS = self.DWG850(ssid)
            lok = len(DWG850_KEYS)
            self.output("Generating %d keys for the %s modem ..." % (lok, ssid))
            self.write_wordlist(_path, DWG850_KEYS)
            self.output("done.")

        elif 'DWG849' in ssid:
            self.output("Generating keys for the %s modem ..." % ssid)
            DWG849_KEYS = self.DWG849(ssid)
            lok = len(DWG849_KEYS)
            self.output("Generating %d keys for the %s modem ..." % (lok, ssid))
            self.write_wordlist(_path, DWG849_KEYS)
            self.output("done.")

        else:
            self.output("An algorithm for the %s modem isn't yet supported." % ssid)

    def write_wordlist(self, name, keys):
        # parameter 'name' is path to wordlist file.
        with open(name, 'w') as _file_:
            for key in keys:
                _file_.write(key + '\n')
                _file_.flush() # Empty the data buffer before closing the file.

    def U10C022(self, essid):
        # Ubee/TWC
        _U10C022_KEYS = []

        l2cos = list(essid)[-2] + list(essid)[-1]

        if self.options['nhex'] is True:
            keyspace_1 = [''.join(i) for i in product(self.non_hex, repeat=4)]
            for x in keyspace_1:
                _U10C022_KEYS.append("U10C022" + x[::-1] + str(l2cos).upper())

        elif self.options['hex'] is True:
            keyspace_2 = [''.join(i) for i in product(self.hex_based, repeat=4)]
            for y in keyspace_2:
                _U10C022_KEYS.append("U10C022" + y[::-1] + str(l2cos).upper())

        return _U10C022_KEYS

    def DDW365(self, essid):
        # Ubee/TWC
        _DDW365_KEYS = []

        l2cos = list(essid)[-2] + list(essid)[-1]

        if self.options['nhex'] is True:
            keyspace_1 = [''.join(i) for i in product(self.non_hex, repeat=4)]
            for x in keyspace_1:
                _DDW365_KEYS.append("DDW365" + x[::-1] + str(l2cos).upper())

        elif self.options['hex'] is True:
            keyspace_2 = [''.join(i) for i in product(self.hex_based, repeat=4)]
            for y in keyspace_2:
                _DDW365_KEYS.append("DDW365" + y[::-1] + str(l2cos).upper())

        return _DDW365_KEYS

    def SBG6580(self, essid):
        # Motorola & Arris/Motorola
        _SBG6580_KEYS = []

        l2cos = list(essid)[-2] + list(essid)[-1]

        if self.options['nhex'] is True:
            keyspace_1 = [''.join(i) for i in product(self.non_hex, repeat=4)]
            for x in keyspace_1:
                _SBG6580_KEYS.append("SBG6580" + x[::-1] + str(l2cos).upper())

        elif self.options['hex'] is True:
            keyspace_2 = [''.join(i) for i in product(self.hex_based, repeat=4)]
            for y in keyspace_2:
                _SBG6580_KEYS.append("SBG6580" + y[::-1] + str(l2cos).upper())

        return _SBG6580_KEYS

    def TG852G(self, essid):
        # Arris
        _TG852G_KEYS = []

        l2cos = list(essid)[-2] + list(essid)[-1]

        if self.options['nhex'] is True:
            keyspace_1 = [''.join(i) for i in product(self.non_hex, repeat=4)]
            for x in keyspace_1:
                _TG852G_KEYS.append("TG852G" + x[::-1] + str(l2cos).upper())

        elif self.options['hex'] is True:
            keyspace_2 = [''.join(i) for i in product(self.hex_based, repeat=4)]
            for y in keyspace_2:
                _TG852G_KEYS.append("TG852G" + y[::-1] + str(l2cos).upper())

        return _TG852G_KEYS

    def DDW3611(self, essid):
        # Ubee
        _DDW3611_KEYS = []

        l2cos = list(essid)[-2] + list(essid)[-1]

        if self.options['nhex'] is True:
            keyspace_1 = [''.join(i) for i in product(self.non_hex, repeat=4)]
            for x in keyspace_1:
                _DDW3611_KEYS.append("DDW3611" + x[::-1] + str(l2cos).upper())

        elif self.options['hex'] is True:
            keyspace_2 = [''.join(i) for i in product(self.hex_based, repeat=4)]
            for y in keyspace_2:
                _DDW3611_KEYS.append("DDW3611" + y[::-1] + str(l2cos).upper())

        return _DDW3611_KEYS

    def DDW3612(self, essid):
        _DDW3612_KEYS = []

        l2cos = list(essid)[-2] + list(essid)[-1]

        if self.options['nhex'] is True:
            keyspace_1 = [''.join(i) for i in product(self.non_hex, repeat=4)]
            for x in keyspace_1:
                _DDW3612_KEYS.append("DDW3612" + x[::-1] + str(l2cos).upper())

        elif self.options['hex'] is True:
            keyspace_2 = [''.join(i) for i in product(self.hex_based, repeat=4)]
            for y in keyspace_2:
                _DDW3612_KEYS.append("DDW3612" + y[::-1] + str(l2cos).upper())

        return _DDW3612_KEYS

    def TC8717T(self, essid):
        _TC8717T_KEYS = []

        l2cos = list(essid)[-2] + list(essid)[-1]

        if self.options['nhex'] is True:
            keyspace_1 = [''.join(i) for i in product(self.non_hex, repeat=4)]
            for x in keyspace_1:
                _TC8717T_KEYS.append("TC8717T" + x[::-1] + str(l2cos).upper())

        elif self.options['hex'] is True:
            keyspace_2 = [''.join(i) for i in product(self.hex_based, repeat=4)]
            for y in keyspace_2:
                _TC8717T_KEYS.append("TC8717T" + y[::-1] + str(l2cos).upper())

        return _TC8717T_KEYS

    def DWG875(self, essid):
        _DWG875_KEYS = []

        l2cos = list(essid)[-2] + list(essid)[-1]

        if self.options['nhex'] is True:
            keyspace_1 = [''.join(i) for i in product(self.non_hex, repeat=4)]
            for x in keyspace_1:
                _DWG875_KEYS.append("DWG875" + x[::-1] + str(l2cos).upper())

        elif self.options['hex'] is True:
            keyspace_2 = [''.join(i) for i in product(self.hex_based, repeat=4)]
            for y in keyspace_2:
                _DWG875_KEYS.append("DWG875" + y[::-1] + str(l2cos).upper())

        return _DWG875_KEYS

    def DG860A(self, essid):
        _DG860A_KEYS = []

        l2cos = list(essid)[-2] + list(essid)[-1]

        if self.options['nhex'] is True:
            keyspace_1 = [''.join(i) for i in product(self.non_hex, repeat=4)]
            for x in keyspace_1:
                _DG860A_KEYS.append("DG860A" + x[::-1] + str(l2cos).upper())

        elif self.options['hex'] is True:
            keyspace_2 = [''.join(i) for i in product(self.hex_based, repeat=4)]
            for y in keyspace_2:
                _DG860A_KEYS.append("DG860A" + y[::-1] + str(l2cos).upper())

        return _DG860A_KEYS

    def TG862G(self, essid):
        _TG862G_KEYS = []

        l2cos = list(essid)[-2] + list(essid)[-1]

        if self.options['nhex'] is True:
            keyspace_1 = [''.join(i) for i in product(self.non_hex, repeat=4)]
            for x in keyspace_1:
                _TG862G_KEYS.append("TG862G" + x[::-1] + str(l2cos).upper())

        elif self.options['hex'] is True:
            keyspace_2 = [''.join(i) for i in product(self.hex_based, repeat=4)]
            for y in keyspace_2:
                _TG862G_KEYS.append("TG862G" + y[::-1] + str(l2cos).upper())

        return _TG862G_KEYS

    def TG1672G(self, essid):
        _TG1672G_KEYS = []

        l2cos = list(essid)[-2] + list(essid)[-1]

        if self.options['nhex'] is True:
            keyspace_1 = [''.join(i) for i in product(self.non_hex, repeat=4)]
            for x in keyspace_1:
                _TG1672G_KEYS.append("TG1672G" + x[::-1] + str(l2cos).upper())

        elif self.options['hex'] is True:
            keyspace_2 = [''.join(i) for i in product(self.hex_based, repeat=4)]
            for y in keyspace_2:
                _TG1672G_KEYS.append("TG1672G" + y[::-1] + str(l2cos).upper())

        return _TG1672G_KEYS

    def DVW3201B(self, essid):
        _DVW3201B_KEYS = []

        l2cos = list(essid)[-2] + list(essid)[-1]

        if self.options['nhex'] is True:
            keyspace_1 = [''.join(i) for i in product(self.non_hex, repeat=4)]
            for x in keyspace_1:
                _DVW3201B_KEYS.append("DVW3201B" + x[::-1] + str(l2cos).upper())

        elif self.options['hex'] is True:
            keyspace_2 = [''.join(i) for i in product(self.hex_based, repeat=4)]
            for y in keyspace_2:
                _DVW3201B_KEYS.append("DVW3201B" + y[::-1] + str(l2cos).upper())

        return _DVW3201B_KEYS

    def DWG855(self, essid):
        _DWG855_KEYS = []

        l2cos = list(essid)[-2] + list(essid)[-1]

        if self.options['nhex'] is True:
            keyspace_1 = [''.join(i) for i in product(self.non_hex, repeat=4)]
            for x in keyspace_1:
                _DWG855_KEYS.append("DWG855" + x[::-1] + str(l2cos).upper())

        elif self.options['hex'] is True:
            keyspace_2 = [''.join(i) for i in product(self.hex_based, repeat=4)]
            for y in keyspace_2:
                _DWG855_KEYS.append("DWG855" + y[::-1] + str(l2cos).upper())

        return _DWG855_KEYS

    def TWG850(self, essid):
        _TWG850_KEYS = []

        l2cos = list(essid)[-2] + list(essid)[-1]

        if self.options['nhex'] is True:
            keyspace_1 = [''.join(i) for i in product(self.non_hex, repeat=4)]
            for x in keyspace_1:
                _TWG850_KEYS.append("TWG850" + x[::-1] + str(l2cos).upper())

        elif self.options['hex'] is True:
            keyspace_2 = [''.join(i) for i in product(self.hex_based, repeat=4)]
            for y in keyspace_2:
                _TWG850_KEYS.append("TWG850" + y[::-1] + str(l2cos).upper())

        return _TWG850_KEYS

    def DWG850(self, essid):
        _DWG850_KEYS = []

        l2cos = list(essid)[-2] + list(essid)[-1]

        if self.options['nhex'] is True:
            keyspace_1 = [''.join(i) for i in product(self.non_hex, repeat=4)]
            for x in keyspace_1:
                _DWG850_KEYS.append("DWG850" + x[::-1] + str(l2cos).upper())

        elif self.options['hex'] is True:
            keyspace_2 = [''.join(i) for i in product(self.hex_based, repeat=4)]
            for y in keyspace_2:
                _DWG850_KEYS.append("DWG850" + y[::-1] + str(l2cos).upper())

        return _DWG850_KEYS

    def DWG849(self, essid):
        _DWG849_KEYS = []

        l2cos = list(essid)[-2] + list(essid)[-1]

        if self.options['nhex'] is True:
            keyspace_1 = [''.join(i) for i in product(self.non_hex, repeat=4)]
            for x in keyspace_1:
                _DWG849_KEYS.append("DWG849" + x[::-1] + str(l2cos).upper())

        elif self.options['hex'] is True:
            keyspace_2 = [''.join(i) for i in product(self.hex_based, repeat=4)]
            for y in keyspace_2:
                _DWG849_KEYS.append("DWG849" + y[::-1] + str(l2cos).upper())

        return _DWG849_KEYS
